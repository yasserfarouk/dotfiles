#!/usr/bin/env zsh
# bug fixes
alias fixfire="fd fire ~/.local/share/nvim/site/session | xargs rm -f"
# locations
export FIRENVIM_PATH="$HOME/.local/share/firenvim"
export projects="$HOME/code/projects"
export personal="$HOME/code/personal"
export templates="$HOME/code/templates"
export code="$HOME/code"
export nec="$HOME/storage/gdrive/Business/NEC"
export aist="$HOME/storage/gdrive/Business/AIST"
export papers="$HOME/storage/gdrive/Knowledge/Papers"
export negpapers="$HOME/storage/gdrive/Knowledge/Papers/AutomatedNegotiation"
export config="$HOME/.config"
export mypapers="$HOME/storage/gdrive/Research/Papers/Mypapers"
export pdone="$HOME/storage/gdrive/Research/Papers/Mypapers/Done"
export pcurrent="$HOME/storage/gdrive/Research/Papers/Mypapers/Current"
export psubmitted="$HOME/storage/gdrive/Research/Papers/Mypapers/Submitted"
# spyder
alias spyder="spyder3 -p \".\"&"
# tmuxinator aliases
alias mux="tmuxinator"
alias c="mux code"
alias personal="mux personal"
alias doc="mux document"
alias per="mux personal"
alias p="mux paper"
alias paper="mux paper"
alias s="mux scratch"
alias scratch="mux scratch"
alias site="mux site"
alias d="mux daiba"
alias daiba="mux daiba"
alias e="mux external"
alias external="mux external"
alias pr="mux presentation"
alias present="mux presentation"
# # alias to dotfiles
# alias dotfiles="git --git-dir=$HOME/.dotfiles.git/ --work-tree=$HOME"
# alias dotfiles="git --git-dir=$HOME/.dotfiles.git/ --work-tree=$HOME"
# vim aliases
alias ovim=vim
alias vi=nvim
alias v=nvim
alias vf=vifm

# opening finder in mac
alias f="open ."

# fzf with preview
alias fzf='fzf --preview "bat --style=numbers --color=always --line-range :500 {}"'

# weather
alias weather="curl http://wttr.in/"

# youtube dl
alias youtube="youtube-dl"

# tmux aliases
alias ts='tmux list-sessions'
alias ta='tmux a -t '

# Some aliases for Homebrew
alias bup='brew update && brew upgrade'
alias bout='brew outdated'
alias bi='brew install'
alias bu='brew uninstall'
alias bls='brew list'
alias bsr='brew search'
alias binf='brew info'
alias bdr='brew doctor'

# git aliases
alias gs='git status'
alias ga='git add .'
alias gc='git commit'
alias gpul='git pull'
alias gpsh='git pull'
alias gupdate='git add . && git commit -m"fast commit" && git pull && git push'

# Some directory listing with colors
alias sl=ls
# alias ls='ls -G'        # Compact view, show colors
if command -v exa &> /dev/null
then
	alias ls='exa --icons --group-directories-first'        # Compact view, show colors
fi
alias la='ls -aF'       # Compact view, show hidden
alias ll='ls -al'
alias l='ls -a'
alias l1='ls -1'


function download(){
  curl -O "$2"
}

function highlight(){
  highlight -O rtf $2 --font-size 25 --style solarized-dark -W -J 50 -j 3 --src-lang $2 | pbcopy
}


function ghUpdate() {
  if git remote | grep upstream > /dev/null;
    then
    echo "upstream is set"
  else
    read "?Whats the URl of the original repo? | " answer
    # Add the remote, call it "upstream":
    echo $answer
    git remote add upstream $answer
  fi
  git fetch upstream
  git checkout master
  git rebase upstream/master
}

function ghPages(){
  if [ -z "$2" ]
    then
    echo "Which folder do you want to deploy to GitHub Pages?"
    exit 1
  fi
  git subtree push --prefix $2 origin gh-pages

}


# archive file or folder
function compress()
{
  dirPriorToExe=`pwd`
  dirName=`dirname $2`
  baseName=`basename $2`

  if [ -f $2 ] ; then
    echo "It was a file change directory to $dirName"
    cd $dirName
    case $2 in
      tar.bz2)
        tar cjf $baseName.tar.bz2 $baseName
        ;;
      tar.gz)
        tar czf $baseName.tar.gz $baseName
        ;;
      gz)
        gzip $baseName
        ;;
      tar)
        tar -cvvf $baseName.tar $baseName
        ;;
      zip)
        zip -r $baseName.zip $baseName
        ;;
      *)
        echo "Method not passed compressing using zip"
        zip -r $baseName.zip $baseName
        ;;
    esac
    echo "Back to Directory $dirPriorToExe"
    cd $dirPriorToExe
  else
    if [ -d $2 ] ; then
      echo "It was a Directory change directory to $dirName"
      cd $dirName
      case $2 in
        tar.bz2)
        tar cjf $baseName.tar.bz2 $baseName
        ;;
        tar.gz)
        tar czf $baseName.tar.gz $baseName
        ;;
        gz)
        gzip -r $baseName
        ;;
        tar)
        tar -cvvf $baseName.tar $baseName
        ;;
        zip)
        zip -r $baseName.zip $baseName
        ;;
        *)
        echo "Method not passed compressing using zip"
        zip -r $baseName.zip $baseName
        ;;
      esac
      echo "Back to Directory $dirPriorToExe"
      cd $dirPriorToExe
    else
      echo "'$2' is not a valid file/folder"
    fi
  fi
  echo "Done"
  echo "###########################################"
}

# Extract archives - use: extract <file>
# Based on http://dotfiles.org/~pseup/.bashrc
function extract() {
  local remove_archive
  local success
  local file_name
  local extract_dir

  if (( $# == 0 )); then
    echo "Usage: extract [-option] [file ...]"
    echo
    echo Options:
    echo "    -r, --remove    Remove archive."
  fi

  remove_archive=1
  if [[ "$2" == "-r" ]] || [[ "$2" == "--remove" ]]; then
    remove_archive=0
    shift
  fi

  while (( $# > 0 )); do
    if [[ ! -f "$2" ]]; then
      echo "extract: '$2' is not a valid file" 1>&2
      shift
      continue
    fi

  success=0
  file_name="$( basename "$2" )"
  extract_dir="$( echo "$file_name" | sed "s/\.${1##*.}//g" )"
  case "$2" in
    (*.tar.gz|*.tgz) [ -z $commands[pigz] ] && tar zxvf "$2" || pigz -dc "$2" | tar xv ;;
    (*.tar.bz2|*.tbz|*.tbz2) tar xvjf "$2" ;;
    (*.tar.xz|*.txz) tar --xz --help &> /dev/null \
      && tar --xz -xvf "$2" \
      || xzcat "$2" | tar xvf - ;;
      (*.tar.zma|*.tlz) tar --lzma --help &> /dev/null \
      && tar --lzma -xvf "$2" \
      || lzcat "$2" | tar xvf - ;;
      (*.tar) tar xvf "$2" ;;
      (*.gz) [ -z $commands[pigz] ] && gunzip "$2" || pigz -d "$2" ;;
      (*.bz2) bunzip2 "$2" ;;
      (*.xz) unxz "$2" ;;
      (*.lzma) unlzma "$2" ;;
      (*.Z) uncompress "$2" ;;
      (*.zip|*.war|*.jar|*.sublime-package) unzip "$2" -d $extract_dir ;;
      (*.rar) unrar x -ad "$2" ;;
      (*.7z) 7za x "$2" ;;
      (*.deb)
      mkdir -p "$extract_dir/control"
      mkdir -p "$extract_dir/data"
      cd "$extract_dir"; ar vx "../${1}" > /dev/null
      cd control; tar xzvf ../control.tar.gz
      cd ../data; tar xzvf ../data.tar.gz
      cd ..; rm *.tar.gz debian-binary
      cd ..
      ;;
      (*)
      echo "extract: '$2' cannot be extracted" 1>&2
      success=1
      ;;
    esac

    (( success = $success > 0 ? $success : $? ))
    (( $success == 0 )) && (( $remove_archive == 0 )) && rm "$2"
    shift
  done
}



function gif(){
 ffmpeg -i $2 -vf scale=$2:-1:flags=lanczos -f gif - | gifsicle --optimize=3 --delay=3 > $3
}

function fixSSH(){
 eval $(ssh-agent);
 ssh-add ~/.ssh/id_rsa
}

function searchFolder(){
    if [ "$#" -lt 2 ]; then
        f=`fd . --type d $1 | fzf-tmux`
    else
        f=`fd . --type d --max-depth $2 $1 | fzf-tmux`
    fi
    cd `dirname "$f"`
}

function openInVim(){
    searchFolder $@
    v
}

function tmuxInVim(){
    searchFolder $@
    mux general $f
}
# alacritty neovim
function startAlacritty(){
  nohup alacritty --config-file ~/.config/alacritty/anvim.yml -t $@ -e $SHELL -lc $@ >/dev/null &
}
function separateNvim(){
  if [ -n "${1}" ]; then
    local target=$(realpath $1)
  fi
  if [ -z ${target} ]; then
	  nohup alacritty --config-file ~/.config/alacritty/anvim.yml -t "nvim - ${target}" -e $SHELL -lc "nvim ${target}" >/dev/null &
  else
	  local wd=`dirname ${target}`
	  nohup alacritty --config-file ~/.config/alacritty/anvim.yml --working-directory "${wd}" -t "nvim - ${target}" -e $SHELL -lc "nvim ${target}" >/dev/null &
  fi
}
# FzF aliases
alias gp="searchFolder $mypapers"
alias vp="openInVim $mypapers"
alias tp="tmuxInVim $mypapers"
alias tc="tmuxInVim $HOME/code 2"
alias vc="openInVim $HOME/code 2"
alias gf="searchFolder"
alias vf="openInVim"

# convenient aliases
alias x=extract
alias dl=download
alias k='clear'
alias cls='clear'


# kitty
alias kitty='kitty --single-instance --start-as=maximized --listen-on=unix:/tmp/mykitty --single-instance '

# kill tmux session
alias tkill="for s in \$(tmux list-sessions | awk '{print \$1}' | rg ':' -r '' | fzf); do tmux kill-session -t \$s; done;"
