#!/usr/bin/env zsh
# Source any other dot files
# Just .aliases right now git-completion.bash
for file in ~/.{aliases}; do
  [ -r "$file" ] && source "$file"
done

# load the correct .inputrc file
ln -s -f $HOME/.dotfiles/inputrc_zsh ~/.inputrc
source ~/.exports
source ~/.zshenv

autoload -U promptinit; promptinit
unset file
#bindkey -v
# Disable zsh autocorrect
zstyle ':completion:*' menu select
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'
setopt completeinword
zstyle ':completion:*:*:git:*' script $HOME/.ysupport/git-completion.bash

fpath=($HOME/.ysupport/zsh-completions $fpath)
autoload -U compinit && compinit
zmodload -i zsh/complist
compinit -d ~/.zcompdump_capture

# . <(npm completion)
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

source ~/antigen/antigen.zsh
#antigen use oh-my-zsh
#antigen bundle git
#antigen bundle pip
antigen bundle zsh-users/zsh-syntax-highlighting
antigen bundle zsh-users/zsh-autosuggestions
#antigen bundle marzocchi/zsh-notify
antigen bundle mafredri/zsh-async
antigen bundle sindresorhus/pure
antigen apply

source ~/.z/z.sh

# zstyle ':notify:*' command-complete-timeout 5
# zstyle ':notify:*' error-icon "https://media3.giphy.com/media/10ECejNtM1GyRy/200_s.gif"
# zstyle ':notify:*' error-title "Fail"
# zstyle ':notify:*' success-icon "https://s-media-cache-ak0.pinimg.com/564x/b5/5a/18/b55a1805f5650495a74202279036ecd2.jpg"
# zstyle ':notify:*' success-title "Success"
# 

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

#export N_PREFIX="$HOME/n"; [[ :$PATH: == *":$N_PREFIX/bin:"* ]] || PATH+=":$N_PREFIX/bin"  # Added by n-install (see http://git.io/n-install-repo).

# eval "$(pyenv init -)"
# eval "$(pyenv virtualenv-init -)"
if which pyenv-virtualenv-init > /dev/null; then eval "$(pyenv virtualenv-init -)"; fi

# [[ -e "$HOME/anaconda/bin/activate" ]] && source "$HOME/anaconda/bin/activate"
# [[ -e "$HOME/anaconda3/bin/activate" ]] && source "$HOME/anaconda3/bin/activate"

# Tell zsh where it can find the history file.
# This is the default as suggested by the zsh wizard.
export HISTFILE=~/.z_history
# The maximum number of history entries to keep.
export SAVEHIST=10000
# The maximum number of history entries to keep alive in one session,
# typically the same as SAVEHIST.
export HISTSIZE=10000
# Write new entries to the history incrementally instead of on
# shell exit.
setopt INC_APPEND_HISTORY
# Let multiple instances of ZSH share the same active history. This doesn't
# include bang expansions (!!, !$, etc...) which will still use the
# local history.
setopt SHARE_HISTORY
# Stores start and elapsed time for each command in the history file.
# Disable this for compatibility with other shells.
setopt EXTENDED_HISTORY
# Don't save duplicate history entries.
setopt HIST_SAVE_NO_DUPS
# Ignore unecessary whitespace (this is handled properly even with
# quoting).
setopt HIST_REDUCE_BLANKS
# Don't save function definitions to the history file.
setopt HIST_NO_FUNCTIONS
# Don't store calls to `history` or `fc`.
setopt HIST_NO_STORE
# Disable that awful, annoying beep when you hit the edges of the history
# file.
setopt NO_HIST_BEEP

# Normally the default, but bugs out in some versions of zsh + tmux and
# needs to be set explicitly. Allows you to search your history using
# ctrl-r.
bindkey '^R' history-incremental-search-backward

autoload -U up-line-or-beginning-search
autoload -U down-line-or-beginning-search
zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search
bindkey "^[[A" up-line-or-beginning-search # Up
bindkey "^[[B" down-line-or-beginning-search # Down

# Better searching in command mode
bindkey -M vicmd '?' history-incremental-search-backward
bindkey -M vicmd '/' history-incremental-search-forward

# Beginning search with arrow keys
bindkey "^[OA" up-line-or-beginning-search
bindkey "^[OB" down-line-or-beginning-search
bindkey -M vicmd "k" up-line-or-beginning-search
bindkey -M vicmd "j" down-line-or-beginning-search
bindkey -M vicmd "^V" edit-command-line

# Updates editor information when the keymap changes.
function zle-keymap-select() {
  zle reset-prompt
  zle -R
}

zle -N zle-keymap-select

function vi_mode_prompt_info() {
  echo "${${KEYMAP/vicmd/[% NORMAL]%}/(main|viins)/[% INSERT]%}"
}

# define right prompt, regardless of whether the theme defined it
RPS1='$(vi_mode_prompt_info)'
RPS2=$RPS1

source ~/.aliases


# pyenv 
if which pyenv-virtualenv-init > /dev/null; then eval "$(pyenv virtualenv-init -)"; fi
# Vi mode
bindkey -e