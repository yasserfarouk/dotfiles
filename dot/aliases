#!/usr/bin/env zsh

# Some aliases for Homebrew
alias bup='brew update && brew upgrade'
alias bout='brew outdated'
alias bin='brew install'
alias brm='brew uninstall'
alias bls='brew list'
alias bsr='brew search'
alias binf='brew info'
alias bdr='brew doctor'

# Some directory listing with colors
alias sl=ls
alias ls='ls -G'        # Compact view, show colors
alias la='ls -AF'       # Compact view, show hidden
alias ll='ls -al'
alias l='ls -a'
alias l1='ls -1'

# because I'm to lazy to write vim
alias v='nvim'
# alias n="nvim"
alias s="sudo"
alias e="open -a /Applications/Emacs.app"
alias n="open -a /Applications/Neovim.app"
# Desktop Programs
alias xcode="open -a '/Applications/XCode.app'"
alias safari="open -a safari"
alias chrome="open -a google\ chrome"
alias chromium="open -a chromium"
alias f='open -a Finder '
alias fh='open -a Finder .'
alias textedit='open -a TextEdit'
alias hex='open -a "Hex Fiend"'
alias skype='open -a Skype'
alias slack="open -a '/Applications/Slack.app'"

# Usefull stuff for presentation and seeing dotfiles
alias hidedesktop="defaults write com.apple.finder CreateDesktop -bool false && killall Finder"
alias showdesktop="defaults write com.apple.finder CreateDesktop -bool true && killall Finder"
alias showall='defaults write com.apple.finder AppleShowAllFiles YES && killall Finder'
alias hideall='defaults write com.apple.finder AppleShowAllFiles NO && killall Finder'

# Get rid of those pesky .DS_Store files recursively
alias dsclean='find . -type f -name .DS_Store -print0 | xargs -0 rm'

# Flush your dns cache
alias flush='dscacheutil -flushcache'

# Because Typing python -m SimpleHTTPServer is too Damn Long
# Start an HTTP server from a directory, optionally specifying the port
function server() {
    local port="${1:-8000}"
  #    open "http://localhost:${port}/"
  open -a google\ chrome\ canary "http://localhost:${port}/" --args --disable-web-security
  # Set the default Content-Type to `text/plain` instead of `application/octet-stream`
  # And serve everything as UTF-8 (although not technically correct, this doesnâ€™t break anything for binary files)
  python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

function download(){
  curl -O "$2"
}

function highlight(){
  highlight -O rtf $2 --font-size 25 --style solarized-dark -W -J 50 -j 3 --src-lang $2 | pbcopy
}

alias dl=download

function ghUpdate() {
  if git remote | grep upstream > /dev/null;
    then
    echo "upstream is set"
  else
    read "?Whats the URl of the original repo? | " answer
    # Add the remote, call it "upstream":
    echo $answer
    git remote add upstream $answer
  fi
  git fetch upstream
  git checkout master
  git rebase upstream/master
}

function ghPages(){
  if [ -z "$2" ]
    then
    echo "Which folder do you want to deploy to GitHub Pages?"
    exit 1
  fi
  git subtree push --prefix $2 origin gh-pages

}

# incase i forget how to clear
alias c='clear'
alias k='clear'
alias cls='clear'

# presentation crap
  # alias whoamireally='echo "Mike Hartington
  # Dev Advocate for Ionic
  # Beer lover and Cat lover" '

# archive file or folder
function compress()
{
  dirPriorToExe=`pwd`
  dirName=`dirname $2`
  baseName=`basename $2`

  if [ -f $2 ] ; then
    echo "It was a file change directory to $dirName"
    cd $dirName
    case $2 in
      tar.bz2)
        tar cjf $baseName.tar.bz2 $baseName
        ;;
      tar.gz)
        tar czf $baseName.tar.gz $baseName
        ;;
      gz)
        gzip $baseName
        ;;
      tar)
        tar -cvvf $baseName.tar $baseName
        ;;
      zip)
        zip -r $baseName.zip $baseName
        ;;
      *)
        echo "Method not passed compressing using tar.bz2"
        tar cjf $baseName.tar.bz2 $baseName
        ;;
    esac
    echo "Back to Directory $dirPriorToExe"
    cd $dirPriorToExe
  else
    if [ -d $2 ] ; then
      echo "It was a Directory change directory to $dirName"
      cd $dirName
      case $2 in
        tar.bz2)
        tar cjf $baseName.tar.bz2 $baseName
        ;;
        tar.gz)
        tar czf $baseName.tar.gz $baseName
        ;;
        gz)
        gzip -r $baseName
        ;;
        tar)
        tar -cvvf $baseName.tar $baseName
        ;;
        zip)
        zip -r $baseName.zip $baseName
        ;;
        *)
        echo "Method not passed compressing using tar.bz2"
        tar cjf $baseName.tar.bz2 $baseName
        ;;
      esac
      echo "Back to Directory $dirPriorToExe"
      cd $dirPriorToExe
    else
      echo "'$2' is not a valid file/folder"
    fi
  fi
  echo "Done"
  echo "###########################################"
}

  # Extract archives - use: extract <file>
  # Based on http://dotfiles.org/~pseup/.bashrc
  function extract() {
    local remove_archive
    local success
    local file_name
    local extract_dir

    if (( $# == 0 )); then
      echo "Usage: extract [-option] [file ...]"
      echo
      echo Options:
      echo "    -r, --remove    Remove archive."
    fi

    remove_archive=1
    if [[ "$2" == "-r" ]] || [[ "$2" == "--remove" ]]; then
      remove_archive=0
      shift
    fi

    while (( $# > 0 )); do
      if [[ ! -f "$2" ]]; then
        echo "extract: '$2' is not a valid file" 1>&2
        shift
        continue
      fi

      success=0
      file_name="$( basename "$2" )"
      extract_dir="$( echo "$file_name" | sed "s/\.${1##*.}//g" )"
      case "$2" in
        (*.tar.gz|*.tgz) [ -z $commands[pigz] ] && tar zxvf "$2" || pigz -dc "$2" | tar xv ;;
        (*.tar.bz2|*.tbz|*.tbz2) tar xvjf "$2" ;;
        (*.tar.xz|*.txz) tar --xz --help &> /dev/null \
        && tar --xz -xvf "$2" \
        || xzcat "$2" | tar xvf - ;;
        (*.tar.zma|*.tlz) tar --lzma --help &> /dev/null \
        && tar --lzma -xvf "$2" \
        || lzcat "$2" | tar xvf - ;;
        (*.tar) tar xvf "$2" ;;
        (*.gz) [ -z $commands[pigz] ] && gunzip "$2" || pigz -d "$2" ;;
        (*.bz2) bunzip2 "$2" ;;
        (*.xz) unxz "$2" ;;
        (*.lzma) unlzma "$2" ;;
        (*.Z) uncompress "$2" ;;
        (*.zip|*.war|*.jar|*.sublime-package) unzip "$2" -d $extract_dir ;;
        (*.rar) unrar x -ad "$2" ;;
        (*.7z) 7za x "$2" ;;
        (*.deb)
        mkdir -p "$extract_dir/control"
        mkdir -p "$extract_dir/data"
        cd "$extract_dir"; ar vx "../${1}" > /dev/null
        cd control; tar xzvf ../control.tar.gz
        cd ../data; tar xzvf ../data.tar.gz
        cd ..; rm *.tar.gz debian-binary
        cd ..
        ;;
        (*)
        echo "extract: '$2' cannot be extracted" 1>&2
        success=1
        ;;
      esac

      (( success = $success > 0 ? $success : $? ))
      (( $success == 0 )) && (( $remove_archive == 0 )) && rm "$2"
      shift
    done
  }
  alias x=extract



  function gif(){
   ffmpeg -i $2 -vf scale=$2:-1:flags=lanczos -f gif - | gifsicle --optimize=3 --delay=3 > $3
 }

 function fixSSH(){
  eval $(ssh-agent);
  ssh-add ~/.ssh/id_rsa
}

alias vi=vim

